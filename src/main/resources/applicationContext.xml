<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"   
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
		http://www.springframework.org/schema/tx   
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd  
		http://www.springframework.org/schema/aop   
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd  
		http://www.springframework.org/schema/context  
		http://www.springframework.org/schema/context/spring-context-4.1.xsd">
	<!-- 加载dbconfig.properties文件，用于下边的数据库配置   -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 将service及其子目录下标有@Component、@Service等注解的类自动装配   -->
    <context:component-scan base-package="cc.ilvyou.service.business.*"/>
    
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <context:component-scan base-package="cc.ilvyou.dao.business.*"/>
	
    <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="org.postgresql.Driver"/>
        <property name="jdbcUrl" value="jdbc:postgresql://localhost:5432/postgres"/>
        <property name="user" value="postgres"/>
        <property name="password" value="123456"/>
    </bean>
    
	<bean id = "jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">   
		<property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="userDao" class="cc.ilvyou.dao.business.Imp.UserDaoImp">
        <property name="dataSource"  ref="dataSource" />
    </bean>
    
	<!-- 事物 -->
	<tx:annotation-driven />  
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- shiro security framework -->
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
	<!--<bean id="myRealm" class="me.hys.base.shiro.MyRealm"/>  -->
	   
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
	<!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  -->
	    <!--<property name="realm" ref="myRealm"/>  -->
	<!--</bean>  -->
	   
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
	<!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  -->
	    <!--&lt;!&ndash; Shiro的核心安全接口,这个属性是必须的 &ndash;&gt;  -->
	    <!--<property name="securityManager" ref="securityManager"/>  -->
	    <!--&lt;!&ndash; 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 &ndash;&gt;  -->
	    <!--<property name="loginUrl" value="/login"/>  -->
	    <!--&lt;!&ndash; 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) &ndash;&gt;  -->
	    <!--<property name="successUrl" value="/workflow/index"/>  -->
	    <!--&lt;!&ndash; 用户访问未对其授权的资源时,所显示的连接 &ndash;&gt;  -->
	    <!--&lt;!&ndash; 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp &ndash;&gt;  -->
	    <!--<property name="unauthorizedUrl" value="/login"/>  -->
	    <!--&lt;!&ndash; Shiro连接约束配置,即过滤链的定义 &ndash;&gt;  -->
	    <!--&lt;!&ndash; 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 &ndash;&gt;  -->
	    <!--&lt;!&ndash; 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 &ndash;&gt;  -->
	    <!--&lt;!&ndash; anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 &ndash;&gt;  -->
	    <!--&lt;!&ndash; authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter &ndash;&gt;  -->
	    <!--<property name="filterChainDefinitions">  -->
	        <!--<value>  -->
	             <!--/auth=anon-->
	             <!--/login=anon-->
	             <!--/api/**=anon-->
	             <!--/index=authc-->
	             <!--/user/**=authc-->
	             <!--/message/**=authc-->
	             <!--/product/**=authc-->
	             <!--/profile/**=authc-->
	             <!--/case/**=authc-->
	        <!--</value>  -->
	    <!--</property>-->
	<!--</bean>-->
</beans>  